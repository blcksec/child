Body                     = { Statement (semicolon | newline | eof ) }
Statement                = LabeledStatement | SimpleStatement | Block
LabeledStatement         = Label ":" Statement
SimpleStatement          = Expression | Declaration | Assignment | PostfixOperatorStatement | EmptyStatement
Declaration              = ExpressionList ":=" ExpressionList
Assignment               = ExpressionList assign_operator ExpressionList
PostfixOperatorStatement = Expression postfix_operator
EmptyStatement           =
Block                    = "{" Body "}"
Operand                  = Literal | identifier | "(" Expression ")"
Literal                  = BasicLiteral | CompositeLiteral
BasicLiteral             = boolean | number | character | text
CompositeLiteral         = List | Dictionary
List                     = "[" [ Expression { "," Expression } ] "]"
Dictionary               = "[" DictionaryElement { "," DictionaryElement } ] "]"
DictionaryItem           = LabeledExpression | Expression
LabeledExpression        = Label ":" Expression
LabeledExpressionList    = LabeledExpression { "," LabeledExpression }
Expression               = UnaryExpression | Expression binary_operator UnaryExpression
ExpressionList           = Expression { "," Expression }
UnaryExpression          = PrimaryExpression | unary_operator UnaryExpression
PrimaryExpression        = Operand | Conversion | PrimaryExpression Index | PrimaryExpression Call
Conversion               = identifier "<" identifier ">"
Index                    = "[" Expression "]"
Call                     = "(" [ ArgumentList [ "," ] ] ")" [ Block ]
ArgumentList             = LabeledExpressionList [ "..." ]
Label                    = identifier
