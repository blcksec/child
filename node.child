Node {
doc:
    "Root element, grandfather of everything."
body:
    \origin {
    test:
        n1 := Node()
        n2 := Node()
        ?: n2 origin == Node
        n2 origin = n1
        ?: n2 origin == n1
    }

    \extensions {
    test:
        n := Node()
        ?: n extensions empty?
        e1 := Node()
        n extensions << e1
        ?: n extensions size == 1
        e2 := Node()
        n extensions << e2
        ?: n extensions size == 2
        /*
        Node *node1 = CHILD_NODE();
        Node *node2 = CHILD_NODE();
        Node *obj = CHILD_NODE();
        QCOMPARE(obj->extensions().size(), 0);
        QCATCH(obj->addExtension(NULL), NullPointerException);
        obj->addExtension(node1);
        QCOMPARE(obj->extensions().size(), 1);
        QCOMPARE(obj->extensions()[0], node1);
        QCATCH(obj->addExtension(node1), DuplicateException);
        obj->addExtension(node2);
        QCOMPARE(obj->extensions().size(), 2);
        QCOMPARE(obj->extensions()[1], node2);
        QCATCH(obj->addExtension(node2), DuplicateException);
        */
    }

    \fork {
    doc:
        "Fork the receiver."
    test:
        n := Node()
        f := n fork
        ?: f origin = n
    }
test:
    ?: origin == self
    ?: parent == self
}
