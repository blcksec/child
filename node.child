Node {
doc:
    "Root element, grandfather of everything."
body:
    \origin {
    test:
        n1 := Node()
        n2 := Node()
        ?: n2 origin == Node
        n2 origin = n1
        ?: n2 origin == n1
    }

    \extensions {
    test:
        // Adding...
        N := Node()
        ?: N extensions empty?
        E1 := Node()
        N extensions << E1
        ?: N extensions size == 1
        ?: N extensions[0] == E1
        !: DuplicateException throw? { N extensions[0] = E1 }
        ?: DuplicateException throw? { N extensions << E1 }
        E2 := Node()
        N extensions << E2
        ?: N extensions size == 2
        ?: N extensions[1] == E2
        ?: DuplicateException throw? { N extensions << E2 }
        ?: DuplicateException throw? { N extensions[1] = E1 }

        // Querying...
        ?: N extensions[:E1]
        ?: N extensions[:E2]
        E3 := Node()
        ?: NotFoundException throw? { N extensions[:E3] }
        !: N extensions[:E3]?
        N extensions << E3
        !: NotFoundException throw? { N extensions[:E3] }
        ?: N extensions[:E3]?

        // Removing...
        // E4 := Node()
        // N extensions[:E4] >>

        /*
        Node *node1 = CHILD_NODE();
        Node *node2 = CHILD_NODE();
        Node *obj = CHILD_NODE();
        QCOMPARE(obj->extensions().size(), 0);
        obj->addExtension(node1);
        QCOMPARE(obj->extensions().size(), 1);
        QCATCH(obj->removeExtension(NULL), NullPointerException);
        QCATCH(obj->removeExtension(node2), NotFoundException);
        obj->removeExtension(node1);
        QCOMPARE(obj->extensions().size(), 0);
        obj->addExtension(node1);
        obj->addExtension(node2);
        QCOMPARE(obj->extensions().size(), 2);
        obj->removeExtension(node1);
        QCOMPARE(obj->extensions().size(), 1);
        obj->removeExtension(node2);
        QCOMPARE(obj->extensions().size(), 0);
        */
    }

    \fork {
    doc:
        "Fork the receiver."
    test:
        n := Node()
        f := n fork
        ?: f origin = n
    }
test:
    ?: origin == self
    ?: parent == self
}
